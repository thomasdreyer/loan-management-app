// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Loan {
  id        String   @id @default(cuid())
  amount    Float
  interest  Float
  term      Int
  status    String   @default("pending")
  clientId  String?
  client    Client?  @relation("ClientLoans", fields: [clientId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Client {
  id          String    @id @default(cuid())
  firstName   String
  lastName    String
  email       String    @unique
  phone       String?
  address     String?
  dateOfBirth DateTime?
  employment  String?   // e.g., Employer's name or employment status
  income      Float?    // Annual or monthly income
  creditScore Int?      // Credit score of the client
  loans       Loan[]    @relation("ClientLoans")  // Relates to loans applied by this client
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}



enum UserRole {
  TELLER
  MANAGER
  ADMIN
  AUDITOR
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  password      String?        // Hashed password
  role          UserRole
  branch        String?
  department    String?
  accessLevel   Int
  emailVerified DateTime?
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  sessions      Session[]
}


model Account {
  id                 String   @id @default(cuid())
  userId             String   @map("user_id")
  type               String
  provider           String
  providerAccountId  String   @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}


model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

